name: Publish Release

# GHA_RELEASE_TOKEN requires
# contents: read/write
# pull requests: read/write
# workflows: read/write

on:
  workflow_dispatch:

jobs:
  # This job extracts all workspace packages from package.json
  # and prepares them for the matrix strategy in the publish job
  read-workspaces:
    runs-on: ubuntu-latest
    outputs:
      # This output will be consumed by the publish job's matrix
      packages: ${{ steps.read-workspaces.outputs.packages }}

    # Enforce branching strategy rules:
    # We only release production from main and prereleases from next
    if: (github.ref == 'refs/heads/main') || (github.ref == 'refs/heads/next')

    steps:
      # Get the code from the repository
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Use the built-in token for GitHub Actions

      # Extract workspace package patterns from package.json
      # Note: This only extracts the patterns (e.g. "packages/*"), not the resolved directories
      # The matrix will receive these patterns and each job will process one pattern
      - name: Extract workspaces from package.json
        id: read-workspaces
        run: |
          # Use Node.js to read the workspaces array from package.json
          PACKAGES=$(node -e '
            const pkg = JSON.parse(require("fs").readFileSync("./package.json", "utf8"));
            console.log(JSON.stringify(pkg.workspaces));
          ')
          echo "Found packages: $PACKAGES"
          # Set the output for use in the matrix strategy
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

  # This job publishes each package to NPM
  # It runs once per package pattern from the read-workspaces job
  publish-packages:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Needed for npm provenance
    needs: read-workspaces # Wait for the read-workspaces job to complete

    # Add env vars for tests
    env:
      TEST_MNEMONIC: ${{ secrets.TEST_MNEMONIC }}
      TEST_2_MNEMONIC: ${{ secrets.TEST_2_MNEMONIC }}
      TEST_NODE_MNEMONIC: ${{ secrets.TEST_NODE_MNEMONIC }}

    # Use a matrix strategy to process each package pattern in parallel
    # but limit to one at a time for controlled publishing order
    strategy:
      max-parallel: 1 # Process one package at a time (important for interdependent packages)
      matrix:
        package: ${{ fromJson(needs.read-workspaces.outputs.packages) }} # Each pattern becomes a separate job

    steps:
      # Get the code from the repository
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Configure Node.js and NPM settings
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20 # Use Node.js 20.x
          registry-url: 'https://registry.npmjs.org' # Set NPM registry URL

      # Setup any services required for tests here

      # End setup for tests

      # Remove the root package.json to prevent dependency conflicts
      - name: Remove Mono-Repo Node Modules
        run: |
          rm package.json
          rm package-lock.json

      # For each package install its dependencies and perform the dist task
      - name: Run Dist
        run: |
          cd ${{ matrix.package }}
          npm install
          npm run dist

      # Before we publish the package to NPM we remove all the scripts and devDependencies
      # as these are not needed in the published package
      - name: Cleanup package.json properties
        run: |
          cd ${{ matrix.package }}
          npm pkg delete scripts
          npm pkg delete devDependencies

      # Publish the package to NPM and tag the release as next if it's a prerelease
      - name: Publish NPM Package
        run: |
          NPM_TAG=${{ github.ref == 'refs/heads/next' && 'next' || 'latest' }}
          cd ${{ matrix.package }}
          # Check if package is private
          IS_PRIVATE=$(node -e "console.log(require('./package.json').private === true ? 'true' : 'false')")

          if [ "$IS_PRIVATE" = "true" ]; then
            echo "Package is marked as private, skipping publication"
          else
            npm publish --provenance --access public --tag ${NPM_TAG}
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Once the packages have been published we create the releases on GitHub
  # No need to use a patched version of please-release here as the version
  # numbers were already incremented in the prepare-release action
  publish-gh-releases:
    runs-on: ubuntu-latest
    needs: publish-packages

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Using GITHUB_TOKEN makes actions run as github-actions bot

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      # Publish the GitHub releases
      - name: Release Please
        run: |
          CONFIG_FILE=release/release-please-config.${{ github.ref == 'refs/heads/next' && 'prerelease' || 'prod' }}.json
          MANIFEST_FILE=release/release-please-manifest.${{ github.ref == 'refs/heads/next' && 'prerelease' || 'prod' }}.json
          npx --yes release-please github-release --config-file=${CONFIG_FILE} --manifest-file=${MANIFEST_FILE} --repo-url=${{ github.repository }} --target-branch=${{ github.ref_name }} --token=${{ secrets.GHA_RELEASE_TOKEN }}
