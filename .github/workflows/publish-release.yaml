name: Publish Release

on:
  workflow_dispatch:
    inputs:
      semverType:
        description: 'Which type of semver to release'
        required: true
        type: choice
        options:
          - 'prerelease'
          - 'patch'
          - 'minor'
          - 'major'

jobs:
  # Publish all the packages to npm
  publish:
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    # Make sure we only perform prerelease on next branch and prod on main branch
    if: (github.ref == 'refs/heads/main' && github.event.inputs.semverType != 'prerelease') || (github.ref == 'refs/heads/next' && github.event.inputs.semverType == 'prerelease')

    strategy:
      max-parallel: 1
      matrix:
        package:
          [
            'packages/core',
            'packages/crypto',
            'packages/entity',
            'packages/image',
            'packages/qr',
            'packages/web',
            'packages/modules',
            'packages/cli-core',
            'apps/crypto-cli'
          ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: next

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      # Remove the root package.json for the mono-repo so that each individual package can install
      # it's own dependencies, this guarantees that the dependencies for each package are correct
      - name: Remove Mono-Repo Node Modules
        run: |
          rm package.json
          rm package-lock.json

      # For each package install its dependencies and perform the dist task
      - name: Run Dist
        run: |
          cd ${{ matrix.package }}
          npm install
          npm run dist

      # Before we publish the package to NPM we remove all the scripts and devDependencies
      # as these are not needed in the published package
      - name: Cleanup package properties
        run: |
          cd ${{ matrix.package }}
          npm pkg delete scripts
          npm pkg delete devDependencies

      # Publish the package to NPM and tag the release as next if it's a prerelease
      - name: Publish
        run: |
          NPM_TAG=${{ github.event.inputs.semverType == 'prerelease' && '--tag next' || '' }}
          cd ${{ matrix.package }}
          npm publish --provenance --access public ${NPM_TAG}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Once the packages have been published we create the releases on GitHub
  # No need to use a patched version of please-release here as the version
  # numbers were already incremented in the prepare-release action
  post-publish:
    needs: publish
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: next

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      # Publish the GitHub releases
      - name: Release Please
        run: |
          CONFIG_FILE=release/release-please-config.${{ github.event.inputs.semverType }}.json
          MANIFEST_FILE=release/release-please-manifest.${{ github.event.inputs.semverType == 'prerelease' && 'prerelease' || 'prod' }}.json
          npx --yes release-please github-release --config-file=${CONFIG_FILE} --manifest-file=${MANIFEST_FILE} --repo-url=${{ github.repository }} --target-branch=${{ github.ref_name}} --token=${{ secrets.GHA_RELEASE_TOKEN }}

      # Add the artifacts to the GitHub releases
      - name: Add artifacts to release
        env:
          GITHUB_TOKEN: ${{ secrets.RP_TOKEN }}
        run: |
          # Use the manifest file to get the package names and versions
          MANIFEST_FILE=release/release-please-manifest.${{ github.event.inputs.semverType == 'prerelease' && 'prerelease' || 'prod' }}.json
          PACKAGES=$(jq -r 'keys[]' $MANIFEST_FILE)

          for KEY in $PACKAGES; do
            KEY_VALUE=$(jq -r ".\"$KEY\"" $MANIFEST_FILE)
            echo "Processing: $KEY: $KEY_VALUE"

            IFS='/' read -ra KEY_PARTS <<< "$KEY"
            PACKAGE_NAME=${KEY_PARTS[1]}
            
            cd $KEY
            npm pack
            gh release upload ${PACKAGE_NAME}-v$KEY_VALUE ${PACKAGE_NAME}-$KEY_VALUE.tgz
            cd ../..
          done
