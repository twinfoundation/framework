name: Prepare Release

# GHA_RELEASE_TOKEN requires
# contents: read/write
# pull requests: read/write
# workflows: read/write

on:
  # This workflow is triggered manually from the GitHub UI
  workflow_dispatch:
    inputs:
      # Allow the user to choose which type of release to prepare
      semverType:
        description: 'Which type of semver to release'
        required: true
        type: choice
        options:
          - 'prerelease' # For development releases (e.g., 0.1.0-next.1)
          - 'patch' # For bug fixes (e.g., 0.1.1)
          - 'minor' # For new features (e.g., 0.2.0)
          - 'major' # For breaking changes (e.g., 1.0.0)

jobs:
  # Prepare all the packages for update by creating a PR with version bumps and changelog updates
  prepare:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for creating/updating branches for version bumps
      pull-requests: write # Needed for creating the release PR
      id-token: write # Keep existing permissions for authentication

    # Enforce branching strategy rules:
    # 1. Prereleases (next.X) can only be created from the 'next' branch
    # 2. Production releases can only be created from the 'main' branch
    if: (github.ref == 'refs/heads/main' && github.event.inputs.semverType != 'prerelease') || (github.ref == 'refs/heads/next' && github.event.inputs.semverType == 'prerelease')

    steps:
      # Clone the repository to the runner
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Using GITHUB_TOKEN makes actions run as github-actions bot

      # Set up Node.js environment for running npm commands
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20' # Use Node.js 20.x

      # Install dependencies as specified in package-lock.json
      - name: NPM Install
        run: npm ci # Using 'ci' for clean, reproducible installs

      # Apply custom patches to release-please to modify its behavior
      # This customizes how prerelease versioning works to always increment the prerelease number
      # without bumping the core version (e.g., 0.1.0-next.1 â†’ 0.1.0-next.2 rather than 0.2.0-next.0)
      - name: Patch release-please prerelease versioning strategy
        run: npx patch-package --patch-dir release

      # Calculate the prod version based on the current branch
      # As release-please versioning strategy doesn't work when pre major releases
      - name: Calculate prod version
        if: github.ref == 'refs/heads/main' # Only run this step if we are creating a production release
        id: calc-version
        run: |
          # Install semver package if not already available
          npm install semver --no-save

          # Read the first version from the production manifest and increment it using semver
          # Then save it to the config file as a fixed release version
          node -e "
            const fs = require('fs');
            const semver = require('semver');
            const manifest = JSON.parse(fs.readFileSync('release/release-please-manifest.prod.json', 'utf8'));
            const currentVersion = Object.values(manifest)[0];
            const semverType = '${{ github.event.inputs.semverType }}';
            let prodVersion = semver.inc(currentVersion, semverType);

            const config = JSON.parse(fs.readFileSync('release/release-please-config.prod.json', 'utf8'));
            config["release-as"] = prodVersion;
            fs.writeFileSync('release/release-please-config.prod.json', JSON.stringify(config, null, 2));
          "

      # Release please will not see any changes if next has been merged into main
      # This step ensures that release-please runs even if there are no conventional commits
      # - name: Force release by adding commit
      #   if: github.ref == 'refs/heads/main' # Only run this step if we are creating a production release
      #   run: |
      #     # Create a commit to ensure release-please runs even if there are no conventional commits
      #     git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
      #     git config --global user.name "github-actions[bot]"
      #     git commit --allow-empty -m "feat: release to production ${{ steps.calc-version.outputs.prod_version }}" -m "Release-As: ${{ steps.calc-version.outputs.prod_version }}"
      #     git push

      # Run release-please to:
      # 1. Analyze commits since last release
      # 2. Determine appropriate version bumps
      # 3. Update package.json versions
      # 4. Update package.json versions
      # 5. Update any files with embedded versions
      # 6. Create a PR with all these changes
      - name: Release Please
        id: release-please # ID allows referencing this step later
        run: |
          # Select configuration files based on release type (prerelease vs production)
          CONFIG_FILE=release/release-please-config.${{ github.event.inputs.semverType == 'prerelease' && 'prerelease' || 'prod' }}.json
          MANIFEST_FILE=release/release-please-manifest.${{ github.event.inputs.semverType == 'prerelease' && 'prerelease' || 'prod' }}.json

          # Execute release-please and capture its output
          OUTPUT=$(node_modules/.bin/release-please release-pr --config-file=${CONFIG_FILE} --manifest-file=${MANIFEST_FILE} --repo-url=${{ github.repository }} --target-branch=${{ github.ref_name }} --token=${{ secrets.GITHUB_TOKEN }})

          echo "Release-please output: $OUTPUT"

          # Parse the output to extract the PR number if one was created
          if [[ "$OUTPUT" == *"Successfully opened pull request:"* ]]; then
            # Extract PR number using grep and sed
            PR_NUMBER=$(echo "$OUTPUT" | grep -o "Successfully opened pull request: [0-9]\+" | sed 's/Successfully opened pull request: //')
            
            # Save PR number as step output for use in subsequent steps
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "PR created: $PR_NUMBER"
          else
            # No PR was created - this happens when there are no conventional commits
            # that would trigger a version bump since the last release
            echo "No PR was created"
          fi

      # Automatically approve the PR to speed up the release process
      # This is necessary because PRs opened by the github-actions bot cannot be merged
      # without approval, even with branch protection disabled
      - name: Add reviewer to PR
        if: steps.release-please.outputs.pr_number != '' # Only run if a PR was created
        run: |
          gh pr review ${{ steps.release-please.outputs.pr_number }} --approve
        env:
          # We need to use a different token for the approval as you can't approve your own PRs
          # This token must be from a different user with write access to the repository
          GH_TOKEN: ${{ secrets.GHA_RELEASE_TOKEN }} # Personal access token from a different user
