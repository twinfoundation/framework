name: Prepare Release

# GHA_RELEASE_TOKEN requires
# contents: read/write
# pull requests: read/write
# workflows: read/write

on:
  # This workflow is triggered manually from the GitHub UI
  workflow_dispatch:
    inputs:
      # Allow the user to choose which type of release to prepare
      releaseType:
        description: 'Which type of release to create'
        required: true
        type: choice
        options:
          - 'ðŸš§ prerelease (next branch)' # For development releases (e.g., 0.1.0-next.1) - uses 'next' branch
          - 'ðŸ”§ patch (main branch)' # For bug fixes (e.g., 0.1.1) - uses 'main' branch
          - 'âœ¨ minor (main branch)' # For new features (e.g., 0.2.0) - uses 'main' branch
          - 'ðŸš€ major (main branch)' # For breaking changes (e.g., 1.0.0) - uses 'main' branch

jobs:
  # Prepare all the packages for update by creating a PR with version bumps and changelog updates
  prepare:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed for creating/updating branches for version bumps
      pull-requests: write # Needed for creating the release PR
      id-token: write # Keep existing permissions for authentication

    steps:
      # Set branch variable based on release type
      - name: Set target branch
        id: set-branch
        run: |
          INPUT="${{ github.event.inputs.releaseType }}"

          if [[ "$INPUT" == *"patch"* ]]; then
            BRANCH="main"
            SEMVER_TYPE="patch"
          elif [[ "$INPUT" == *"minor"* ]]; then
            BRANCH="main"
            SEMVER_TYPE="minor"
          elif [[ "$INPUT" == *"major"* ]]; then
            BRANCH="main"
            SEMVER_TYPE="major"
          elif [[ "$INPUT" == *"prerelease"* ]]; then
            BRANCH="next"
            SEMVER_TYPE="prerelease"
          else
            echo "Error: Unrecognized release type: $INPUT"
            exit 1
          fi
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "semver_type=$SEMVER_TYPE" >> $GITHUB_OUTPUT
          echo "Using branch: $BRANCH"
          echo "Using semver type: $SEMVER_TYPE"

      # Clone the repository to the runner
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GHA_RELEASE_TOKEN }} # Use admin PAT instead of GITHUB_TOKEN
          ref: ${{ steps.set-branch.outputs.branch }} # Checkout the calculated branch
          fetch-depth: 0 # Fetch all history for accurate versioning

      # Set up Node.js environment for running npm commands
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use Node.js 20.x

      # Install dependencies with retry
      - name: Install dependencies
        run: |
          for i in {1..3}; do
            npm ci && break || {
              if [ $i -eq 3 ]; then
                echo "npm ci failed after 3 attempts"
                exit 1
              fi
              echo "npm ci failed, retrying in 30 seconds (attempt $i/3)..."
              sleep 30
            }
          done

      # Apply custom patches to release-please to modify its behavior
      # This customizes how prerelease versioning works to always increment the prerelease number
      # without bumping the core version (e.g., 0.1.0-next.1 â†’ 0.1.0-next.2 rather than 0.2.0-next.0)
      - name: Patch release-please prerelease versioning strategy
        run: npx patch-package --patch-dir release

      # Import GPG key for signing commits
      - name: Import GPG key
        run: |
          # Import the GPG private key from secrets, which should be base64 encoded
          echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --import
          echo "GPG_KEY_ID=$GPG_KEY_ID" >> $GITHUB_ENV
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }} # Base64 encoded private key
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }} # GPG key ID

      # Set git config once for all subsequent steps
      - name: Configure Git
        run: |
          git config --global user.email "github@twindev.org"
          git config --global user.name "TWIN GitHub Bot"
          git config --global user.signingkey "$GPG_KEY_ID"
          git config --global commit.gpgsign true
          git config --global tag.gpgsign true

      # Release please will not see any changes if next has been merged into main
      # This step ensures that release-please runs even if there are no conventional commits
      - name: Force release by adding commit
        if: steps.set-branch.outputs.branch == 'main'
        run: |
          git commit -S --allow-empty -m "feat: release to production"
          git push origin main

      # Update the release-please configuration files based on the selected release type
      - name: Update release-please prod config
        if: steps.set-branch.outputs.branch == 'main' # Only run this step if we are creating a production release
        run: |
          # Update the versioning strategy based on the selected release type
          node -e "
            const fs = require('fs');
            const config = JSON.parse(fs.readFileSync('release/release-please-config.prod.json', 'utf8'));
            config['versioning'] = 'always-bump-${{ steps.set-branch.outputs.semver_type }}';
            fs.writeFileSync('release/release-please-config.prod.json', JSON.stringify(config, null, 2));
          "

      # Run release-please to:
      # 1. Analyze commits since last release
      # 2. Determine appropriate version bumps
      # 3. Update package.json versions
      # 4. Update package.json versions
      # 5. Update any files with embedded versions
      # 6. Create a PR with all these changes
      - name: Release Please
        id: release-please # ID allows referencing this step later
        run: |
          # Select configuration files based on release type (prerelease vs production)
          CONFIG_FILE=release/release-please-config.${{ steps.set-branch.outputs.branch == 'next' && 'prerelease' || 'prod' }}.json
          MANIFEST_FILE=release/release-please-manifest.${{ steps.set-branch.outputs.branch == 'next' && 'prerelease' || 'prod' }}.json

          # Execute release-please and capture its output
          OUTPUT=$(node_modules/.bin/release-please release-pr \
            --config-file=${CONFIG_FILE} \
            --manifest-file=${MANIFEST_FILE} \
            --repo-url=${{ github.repository }} \
            --target-branch=${{ steps.set-branch.outputs.branch }} \
            --token=${{ secrets.GITHUB_TOKEN }})

          echo "Release-please output: $OUTPUT"

          # Parse the output to extract the PR number if one was created
          if [[ "$OUTPUT" == *"Successfully opened pull request:"* ]]; then
            # Extract PR number using grep and sed
            PR_NUMBER=$(echo "$OUTPUT" | grep -o "Successfully opened pull request: [0-9]\+" | sed 's/Successfully opened pull request: //')
            
            # Save PR number as step output for use in subsequent steps
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "PR created: $PR_NUMBER"
          else
            # No PR was created - this happens when there are no conventional commits
            # that would trigger a version bump since the last release
            echo "No PR was created"
          fi

      # Automatically approve the PR to speed up the release process
      # This is necessary because PRs opened by the github-actions bot cannot be merged
      # without approval, even with branch protection disabled
      - name: Add reviewer to PR
        if: steps.release-please.outputs.pr_number != '' # Only run if a PR was created
        run: |
          gh pr review ${{ steps.release-please.outputs.pr_number }} --approve
        env:
          # We need to use a different token for the approval as you can't approve your own PRs
          # This token must be from a different user with write access to the repository
          GH_TOKEN: ${{ secrets.GHA_RELEASE_TOKEN }} # Personal access token from a different user
