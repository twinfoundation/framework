{
	"error": {
		"commands": {
			"address": {
				"seedMissingEnv": "The seed does not appear to be hex or base64, assuming it is an environment variable, but there is no environment variable with the name \"{env}\" set.",
				"seedInvalidEnv": "The seed does not appear to be hex or base64, assuming it is an environment variable, but there the environment variable is neither hex or base64. \"{envValue}\"",
				"seedInvalidFormat": "The seed does not appear to be hex, base64 or an environment variable. \"{seed}\""
			}
		}
	},
	"commands": {
		"mnemonic": {
			"summary": "Create a mnemonic.",
			"description": "Create a mnemonic, will also generate the equivalent seed in hex and base64 format.",
			"options": {
				"strength": {
					"param": "--strength '<'number'>'",
					"description": "The number of words in the mnemonic, defaults to 256 which produces 24 words."
				},
				"seed-format": {
					"param": "--seed-format '<'format'>'",
					"description": "The format to output the seed."
				},
				"no-console": {
					"param": "--no-console",
					"description": "Hides the mnemonic and seed in the console."
				},
				"json": {
					"param": "--json '<'filename'>'",
					"description": "Creates a JSON file containing the mnemonic and seed."
				},
				"env": {
					"param": "--env '<'filename'>'",
					"description": "Creates an env file containing the mnemonic and seed."
				}
			},
			"progress": {
				"writingJsonFile": "Writing JSON file",
				"writingEnvFile": "Writing env file"
			},
			"labels": {
				"mnemonic": "Mnemonic",
				"seed": "Seed"
			}
		},
		"address": {
			"summary": "Create bech32 addresses and keys from the seed.",
			"description": "Create a number of bech32 addresses and their associated key pairs from the seed.",
			"options": {
				"seed": {
					"param": "--seed '<'seed'>'",
					"description": "The seed to use for generating the addresses, this can be either hex, base64 or an environment variable name. For an environment variable start the value with a !"
				},
				"load-env": {
					"param": "--load-env '<'env'>'",
					"description": "Load the env file to initialise any environment variables."
				},
				"start": {
					"param": "--start '<'number'>'",
					"description": "The index of the first address to create."
				},
				"count": {
					"param": "--count '<'number'>'",
					"description": "The number of addresses to create, max 100."
				},
				"account": {
					"param": "--account '<'number'>'",
					"description": "The account used to generate the bech32 addresses."
				},
				"hrp": {
					"param": "--hrp '<'hrp'>'",
					"description": "The human readable part of the bech32 addresses."
				},
				"coin": {
					"param": "--coin '<'coin'>'",
					"description": "The coin type used to generate the bech32 addresses."
				},
				"key-type": {
					"param": "--key-type '<'type'>'",
					"description": "The type of key to generate."
				},
				"key-format": {
					"param": "--key-format '<'format'>'",
					"description": "The format to output the keys."
				},
				"no-console": {
					"param": "--no-console",
					"description": "Hides the addresses and keys in the console."
				},
				"json": {
					"param": "--json '<'filename'>'",
					"description": "Creates a JSON file containing the addresses and keys."
				},
				"env": {
					"param": "--env '<'filename'>'",
					"description": "Creates an env file containing the addresses and keys."
				},
				"append-json": {
					"param": "--append-json",
					"description": "If the JSON file already exists append the data instead of overwriting."
				},
				"append-env": {
					"param": "--append-env",
					"description": "If the env file already exists append the data instead of overwriting."
				}
			},
			"progress": {
				"generatingAddresses": "Generating addresses",
				"loadingEnvFile": "Loading env file",
				"writingJsonFile": "Writing JSON file",
				"writingEnvFile": "Writing env file",
				"readingJsonFile": "Reading JSON file",
				"readingEnvFile": "Reading env file"
			},
			"labels": {
				"seed": "Seed",
				"start": "Start",
				"count": "Count",
				"account": "Account",
				"hrp": "HRP",
				"coin": "Coin",
				"key-type": "Key Type",
				"key-format": "Key Format",
				"index": "Index",
				"address": "Address",
				"public-key": "Public Key",
				"private-key": "Private Key"
			}
		}
	},
	"cli": {
		"progress": {
			"done": "Done.",
			"error": "Error"
		},
		"options": {
			"lang": {
				"param": "--lang '<'lang'>'",
				"description": "The language to display the output in."
			}
		}
	}
}
